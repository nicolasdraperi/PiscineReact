import BackendPhotoService from './BackendPhotoService';
import { PhotoService as LocalPhotoService } from './PhotoService';
import { testBackendConnection } from '../utils/testConnection';

// Service hybride qui utilise le backend ET le stockage local
class HybridPhotoService {
  constructor() {
    this.useBackend = false;
    this.backendAvailable = false;
    this.checkingConnection = false;
    this.photosCache = null;
    this.cacheTime = null;
    this.cacheDuration = 2000; // 2 secondes de cache
    this.pendingRequests = new Map(); // Pour √©viter les appels parall√®les
  }

  // V√©rifier la disponibilit√© du backend
  async checkBackendAvailability() {
    if (this.checkingConnection) return this.backendAvailable;
    
    this.checkingConnection = true;
    console.log('üîç V√©rification de la connexion backend...');
    
    try {
      const result = await testBackendConnection();
      this.backendAvailable = result.success;
      this.useBackend = result.success;
      
      if (result.success) {
        console.log('‚úÖ Backend disponible - Mode hybride activ√©');
      } else {
        console.log('‚ö†Ô∏è Backend indisponible - Mode local uniquement');
      }
    } catch (error) {
      console.log('‚ùå Erreur connexion backend:', error.message);
      this.backendAvailable = false;
      this.useBackend = false;
    }
    
    this.checkingConnection = false;
    return this.backendAvailable;
  }

  // Synchroniser les donn√©es locales vers le backend
  async syncLocalToBackend() {
    if (!this.backendAvailable) return false;

    try {
      console.log('üîÑ Synchronisation vers le backend...');
      const localPhotos = await LocalPhotoService.getAllPhotos();
      
      let syncCount = 0;
      for (const photo of localPhotos) {
        try {
          // V√©rifier si la photo existe d√©j√† sur le backend
          if (!photo.synced) {
            await BackendPhotoService.uploadPhoto(photo);
            
            // Marquer comme synchronis√©e localement
            photo.synced = true;
            await LocalPhotoService.savePhoto(photo);
            syncCount++;
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Erreur sync photo:', photo.id, error.message);
        }
      }
      
      console.log(`‚úÖ ${syncCount} photos synchronis√©es`);
      return true;
    } catch (error) {
      console.error('‚ùå Erreur synchronisation:', error);
      return false;
    }
  }

  // Sauvegarder une photo (backend + local)
  async savePhoto(photoData) {
    console.log('üîÑ HybridPhotoService.savePhoto appel√© avec:', photoData?.uri);
    await this.checkBackendAvailability();

    // Toujours sauvegarder en local d'abord
    console.log('üì± Sauvegarde locale...');
    const localResult = await LocalPhotoService.savePhoto(photoData);
    
    // Vider le cache apr√®s sauvegarde pour forcer le refresh
    this.clearCache();
    
    // Essayer de sauvegarder sur le backend si disponible
    if (this.useBackend) {
      try {
        console.log('‚òÅÔ∏è Sauvegarde backend...');
        const backendResult = await BackendPhotoService.uploadPhoto(photoData);
        
        // Marquer comme synchronis√©
        localResult.synced = true;
        localResult.backendId = backendResult.id;
        await LocalPhotoService.savePhoto(localResult);
        
        console.log('‚úÖ Photo sauvegard√©e: Local + Backend');
        return { ...localResult, backendId: backendResult.id };
      } catch (error) {
        console.warn('‚ö†Ô∏è Sauvegarde backend √©chou√©e, photo en local uniquement');
        localResult.synced = false;
        return localResult;
      }
    }

    console.log('üì± Photo sauvegard√©e en local uniquement');
    return localResult;
  }

  // R√©cup√©rer toutes les photos avec cache et protection contre appels multiples
  async getAllPhotos() {
    const cacheKey = 'getAllPhotos';
    
    // V√©rifier le cache
    if (this.photosCache && this.cacheTime && (Date.now() - this.cacheTime) < this.cacheDuration) {
      console.log('üìã Photos depuis le cache (√©vite appels multiples)');
      return this.photosCache;
    }

    // Si un appel est d√©j√† en cours, attendre le r√©sultat
    if (this.pendingRequests.has(cacheKey)) {
      console.log('‚è≥ Attente de l\'appel en cours...');
      return await this.pendingRequests.get(cacheKey);
    }

    // Cr√©er une nouvelle promesse pour cet appel
    const promise = this._fetchAllPhotos();
    this.pendingRequests.set(cacheKey, promise);

    try {
      const result = await promise;
      
      // D√©duplication de s√©curit√© bas√©e sur l'ID/URI
      const deduplicatedResult = this.deduplicatePhotos(result);
      
      // Mettre en cache le r√©sultat
      this.photosCache = deduplicatedResult;
      this.cacheTime = Date.now();
      return deduplicatedResult;
    } finally {
      // Nettoyer la promesse en cours
      this.pendingRequests.delete(cacheKey);
    }
  }

  // M√©thode priv√©e pour r√©cup√©rer les photos
  async _fetchAllPhotos() {
    console.log('üîÑ R√©cup√©ration photos (nouvel appel)');
    await this.checkBackendAvailability();

    if (this.useBackend) {
      try {
        // Essayer le backend d'abord
        const backendPhotos = await BackendPhotoService.getAllPhotos();
        console.log('‚úÖ Photos r√©cup√©r√©es depuis le backend:', backendPhotos.length, 'photos');
        
        // Pour √©viter les doublons, ne retourner QUE les photos backend
        // Le backend contient d√©j√† toutes les photos synchronis√©es de l'utilisateur
        return backendPhotos;
      } catch (error) {
        console.warn('‚ö†Ô∏è Backend indisponible, utilisation du local');
        this.useBackend = false;
      }
    }

    // Fallback sur le stockage local
    const localPhotos = await LocalPhotoService.getAllPhotos();
    console.log('üì± Photos r√©cup√©r√©es depuis le stockage local');
    return localPhotos;
  }

  // R√©cup√©rer les photos par date
  async getPhotosByDate(date) {
    await this.checkBackendAvailability();

    if (this.useBackend) {
      try {
        return await BackendPhotoService.getPhotosByDate(date);
      } catch (error) {
        console.warn('‚ö†Ô∏è Erreur backend, fallback local');
      }
    }

    return await LocalPhotoService.getPhotosByDate(date);
  }

  // Supprimer une photo
  async deletePhoto(photoId) {
    await this.checkBackendAvailability();

    // Supprimer en local
    const localResult = await LocalPhotoService.deletePhoto(photoId);
    
    // Vider le cache apr√®s suppression
    this.clearCache();

    // Supprimer sur le backend si possible
    if (this.useBackend) {
      try {
        await BackendPhotoService.deletePhoto(photoId);
        console.log('‚úÖ Photo supprim√©e: Local + Backend');
      } catch (error) {
        console.warn('‚ö†Ô∏è Suppression backend √©chou√©e');
      }
    }

    return localResult;
  }

  // R√©cup√©rer les statistiques
  async getStats() {
    await this.checkBackendAvailability();

    if (this.useBackend) {
      try {
        return await BackendPhotoService.getStats();
      } catch (error) {
        console.warn('‚ö†Ô∏è Stats backend indisponibles, calcul local');
      }
    }

    return await LocalPhotoService.getStats();
  }

  // Forcer la synchronisation
  async forcSync() {
    await this.checkBackendAvailability();
    if (this.backendAvailable) {
      return await this.syncLocalToBackend();
    }
    return false;
  }

  // √âtat de la connexion
  getConnectionStatus() {
    return {
      backendAvailable: this.backendAvailable,
      useBackend: this.useBackend,
      mode: this.useBackend ? 'Hybride (Backend + Local)' : 'Local uniquement'
    };
  }

  // Vider le cache (apr√®s sauvegarde/suppression)
  clearCache() {
    this.photosCache = null;
    this.cacheTime = null;
    console.log('üóëÔ∏è Cache photos vid√©');
  }

  // D√©duplication bas√©e sur l'ID et l'URI
  deduplicatePhotos(photos) {
    const seen = new Set();
    const unique = [];
    
    for (const photo of photos) {
      // Utiliser l'ID ou l'URI comme cl√© unique
      const key = photo.backendId || photo.id || photo.uri;
      
      if (!seen.has(key)) {
        seen.add(key);
        unique.push(photo);
      } else {
        console.log('üóëÔ∏è Photo dupliqu√©e supprim√©e:', key);
      }
    }
    
    console.log(`‚ú® D√©duplication: ${photos.length} ‚Üí ${unique.length} photos`);
    return unique;
  }
}

export default new HybridPhotoService();
